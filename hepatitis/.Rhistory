library(stringr) # same idea
library(themis) # for SMOTE and other recipes for target balancing
library(vip) # for variable importance
library(probably) # for performance calibration
library(embed)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
update_role(strain, new_role = "id") %>%
step_nzv(all_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_umap(all_predictors(), neighbors = 10)
umap_prep <- prep(umap_rec)
library(embed)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_umap(all_predictors(), neighbors = 10)
umap_prep <- prep(umap_rec)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_umap(all_predictors(), neighbors = 10)
umap_prep <- prep(umap_rec)
df
df <- readr::read_csv("data/HepatitisCdata.csv", col_types = "dfdfdddddddddd") %>% select(-...1)
# make re-coded Category variable
# there is 0=Blood Donor and 0s=suspect Blood Donor
df <- df %>%
mutate(Diagnosis = if_else(str_detect(Category, "Donor"), "Donor", "Hepatitis")) %>%
mutate(Diagnosis = factor(Diagnosis, levels = c("Hepatitis", "Donor"))) %>%
relocate(Diagnosis, .before = Category) %>%
select(-Category)
head(df)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_umap(all_predictors(), neighbors = 10)
umap_prep <- prep(umap_rec)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_umap(all_predictors(), neighbors = 10)
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
ggplot(aes(UMAP1, UMAP2)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_umap(all_predictors(), neighbors = 20)
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
ggplot(aes(UMAP1, UMAP2)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_umap(all_predictors(), neighbors = 30)
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
ggplot(aes(UMAP1, UMAP2)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
pca_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_pca(all_predictors())
pca_prep <- prep(pca_rec)
sdev <- pca_prep$steps[[5]]$res$sdev
percent_variation <- sdev^2 / sum(sdev^2)
var_df <- data.frame(PC = paste0("PC", 1:length(sdev)),
var_explained = percent_variation,
stringsAsFactors = FALSE)
var_df <- var_df %>%
mutate(var_cum_sum = cumsum(var_explained))
var_df %>%
mutate(PC = forcats::fct_inorder(PC)) %>%
ggplot(aes(x = PC, y = var_explained)) +
geom_col(aes(fill = var_cum_sum)) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) +
scale_fill_continuous(type = "viridis")
tidied_pca <- tidy(pca_prep, 4)
tidied_pca %>%
filter(component %in% paste0("PC", 1:6)) %>%
mutate(component = forcats::fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
tidied_pca <- tidy(pca_prep, 5)
tidied_pca %>%
filter(component %in% paste0("PC", 1:6)) %>%
mutate(component = forcats::fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
tidied_pca <- tidy(pca_prep, 5)
tidied_pca <- tidy(pca_prep, 5)
tidied_pca %>%
filter(component %in% paste0("PC", 1:6)) %>%
mutate(component = forcats::fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
tidied_pca <- tidy(pca_prep, 5)
tidied_pca %>%
filter(component %in% paste0("PC", 1:6)) %>%
mutate(component = forcats::fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
tidied_pca <- tidy(pca_prep, 5)
tidied_pca %>%
filter(component %in% paste0("PC", 1:6)) %>%
mutate(component = forcats::fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
pca_df %>%
ggplot(aes(PC01, PC02)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
pca_df <- juice(pca_prep)
pca_df %>%
ggplot(aes(PC01, PC02)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
juice(pca_prep)
pca_df %>%
ggplot(aes(PC1, PC2)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
pca_df %>%
ggplot(aes(PC2, PC3)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
pca_df %>%
ggplot(aes(PC1, PC3)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
library(rgl)
pca_df <- juice(pca_prep) %>% mutate(color = if_else(Diagnosis == "Hepatitis", "red", "blue"))
plot3d(x = pca_df$PC1, y = pca_df$PC2, z = pca_df$PC3,
col = pca_df$color,
type = "s",
radius = 0.2,
xlab = "PC1",
ylab = "PC2",
zlab = "PC3")
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_umap(all_predictors(), neighbors = 50)
umap_prep <- prep(umap_rec)
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
ggplot(aes(UMAP1, UMAP2)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_umap(all_predictors(), neighbors = 10)
umap_prep <- prep(umap_rec)
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
ggplot(aes(UMAP1, UMAP2)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors())
umap_prep <- juice(prep(umap_rec))
umap_embed <- umap::umap(d = umap_prep %>% selevt(-Diagnosis),
n_neighbors = 20,
min_dist = 0.1,
metric = "manhattan",
n_epochs = 200)
umap_embed <- umap::umap(d = umap_prep %>% select(-Diagnosis),
n_neighbors = 20,
min_dist = 0.1,
metric = "manhattan",
n_epochs = 200)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors())
umap_prep <- juice(prep(umap_rec))
umap_embed <- umap::umap(d = umap_prep %>% select(-Diagnosis),
n_neighbors = 20,
min_dist = 0.1,
metric = "manhattan",
n_epochs = 200)
umap_tib <- tibble(resistance = umap_prep$Diagnosis,
UMAP1 = umap_embed$layout[, 1],
UMAP2 = umap_embed$layout[, 2])
ggplot(umap_tib, aes(UMAP1, UMAP2)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
umap_tib <- tibble(Diagnosis = umap_prep$Diagnosis,
UMAP1 = umap_embed$layout[, 1],
UMAP2 = umap_embed$layout[, 2])
ggplot(umap_tib, aes(UMAP1, UMAP2)) +
geom_point(aes(color = Diagnosis, shape = Diagnosis), alpha = 0.7, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
library(bestNormalize)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = T)
library(tidymodels)
library(skimr) # descriptive stats
library(stringr) # same idea
library(themis) # for SMOTE and other recipes for target balancing
library(vip) # for variable importance
library(probably) # for performance calibration
library(bestNormalize) # for ORQ-norm
df <- readr::read_csv("data/HepatitisCdata.csv", col_types = "dfdfdddddddddd") %>% select(-...1)
# make re-coded Category variable
# there is 0=Blood Donor and 0s=suspect Blood Donor
df <- df %>%
mutate(Diagnosis = if_else(str_detect(Category, "Donor"), "Donor", "Hepatitis")) %>%
mutate(Diagnosis = factor(Diagnosis, levels = c("Hepatitis", "Donor"))) %>%
relocate(Diagnosis, .before = Category) %>%
select(-Category)
head(df)
pca_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(all_predictors())
pca_prep <- prep(pca_rec)
sdev <- pca_prep$steps[[5]]$res$sdev
percent_variation <- sdev^2 / sum(sdev^2)
var_df <- data.frame(PC = paste0("PC", 1:length(sdev)),
var_explained = percent_variation,
stringsAsFactors = FALSE)
pca_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(all_predictors())
pca_prep <- prep(pca_rec)
sdev <- pca_prep$steps[[7]]$res$sdev
percent_variation <- sdev^2 / sum(sdev^2)
var_df <- data.frame(PC = paste0("PC", 1:length(sdev)),
var_explained = percent_variation,
stringsAsFactors = FALSE)
var_df <- var_df %>%
mutate(var_cum_sum = cumsum(var_explained))
var_df %>%
mutate(PC = forcats::fct_inorder(PC)) %>%
ggplot(aes(x = PC, y = var_explained)) +
geom_col(aes(fill = var_cum_sum)) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) +
scale_fill_continuous(type = "viridis")
tidied_pca <- tidy(pca_prep, 5)
tidied_pca %>%
filter(component %in% paste0("PC", 1:6)) %>%
mutate(component = forcats::fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
var_df
tidied_pca <- tidy(pca_prep, 7)
tidied_pca %>%
filter(component %in% paste0("PC", 1:6)) %>%
mutate(component = forcats::fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
pca_df <- juice(pca_prep)
pca_df %>%
ggplot(aes(PC1, PC2)) +
geom_point(aes(color = Diagnosis), alpha = 0.33, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
pca_df <- juice(pca_prep)
pca_df %>%
ggplot(aes(PC1, PC2)) +
geom_point(aes(color = Diagnosis), alpha = 0.4, size = 2) +
labs(color = NULL) +
scale_color_brewer(palette = "Set1")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = T)
library(tidymodels)
library(skimr) # descriptive stats
library(stringr) # same idea
library(themis) # for SMOTE and other recipes for target balancing
library(vip) # for variable importance
library(probably) # for performance calibration
library(bestNormalize) # for ORQ-norm
library(ggforce) # for validation results
plot_validation_results <- function(dat) {
dat %>%
select(-strain) %>%
# Create the scatterplot matrix
ggplot(aes(x = .panel_x, y = .panel_y, color = Diagnosis, fill = Diagnosis)) +
geom_point(alpha = 0.4, size = 1) +
geom_autodensity(alpha = .3) +
facet_matrix(vars(-Diagnosis), layer.diag = 2) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
}
pca_df %>%
plot_validation_results()
plot_validation_results <- function(dat) {
dat %>%
# Create the scatterplot matrix
ggplot(aes(x = .panel_x, y = .panel_y, color = Diagnosis, fill = Diagnosis)) +
geom_point(alpha = 0.4, size = 1) +
geom_autodensity(alpha = .3) +
facet_matrix(vars(-Diagnosis), layer.diag = 2) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
}
pca_df %>%
plot_validation_results()
pca_df %>%
plot_validation_results() %>%
ggtitle("PCA")
pca_df %>%
plot_validation_results() +
ggtitle("PCA")
pca_df %>%
plot_validation_results() +
ggtitle("PCA")
pca_df %>%
plot_validation_results() +
ggtitle("PCA")
library(embed)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_umap(all_predictors(), neighbors = 15, min_dist = 0.5, num_comp = 10)
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
plot_validation_results() +
ggtitle("Supervised UMAP")
juice(umap_prep) %>%
plot_validation_results() +
ggtitle("Supervised UMAP")
library(embed)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_umap(all_predictors(),
neighbors = 15,
min_dist = 0.01,
num_comp = 8,
outcome = Diagnosis)
library(embed)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_umap(all_predictors(),
neighbors = 15,
min_dist = 0.01,
num_comp = 8,
outcome = "Diagnosis")
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
plot_validation_results() +
ggtitle("Supervised UMAP")
library(embed)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
#step_orderNorm(all_numeric_predictors()) %>%
#step_normalize(all_numeric_predictors()) %>%
step_umap(all_predictors(),
neighbors = 15,
min_dist = 0.01,
num_comp = 8,
outcome = "Diagnosis")
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
plot_validation_results() +
ggtitle("Supervised UMAP")
library(embed)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
#step_normalize(all_numeric_predictors()) %>%
step_umap(all_predictors(),
neighbors = 15,
min_dist = 0.01,
num_comp = 8,
outcome = "Diagnosis")
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
plot_validation_results() +
ggtitle("Supervised UMAP")
library(embed)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_umap(all_predictors(),
neighbors = 15,
min_dist = 0.01,
num_comp = 8,
outcome = "Diagnosis")
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
plot_validation_results() +
ggtitle("Supervised UMAP")
library(embed)
umap_rec <- recipe(Diagnosis ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
#step_normalize(all_numeric_predictors()) %>%
step_umap(all_predictors(),
neighbors = 15,
min_dist = 0.01,
num_comp = 8,
outcome = "Diagnosis")
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
plot_validation_results() +
ggtitle("Supervised UMAP")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = T)
library(tidymodels)
library(skimr) # descriptive stats
library(stringr) # same idea
library(themis) # for SMOTE and other recipes for target balancing
library(vip) # for variable importance
library(probably) # for performance calibration
library(bestNormalize) # for ORQ-norm
library(ggforce) # for validation results
library(embed) # for UMAP
GGally::ggpairs(df, aes(color = Diagnosis),
upper = list(continuous = GGally::wrap("cor", size = 2.0)),
diag = list(continuous = "barDiag"),
lower = list(continuous = GGally::wrap("points", alpha = 0.3, size=0.8))) +
scale_color_brewer(palette = "Set1", direction = -1) +
scale_fill_brewer(palette = "Set1", direction = -1)
load(file = "data/workspace.RData")
autoplot(lr_res)
rf_res %>%
show_best(metric = "roc_auc")
rf_best <- rf_res %>%
select_best(metric = "roc_auc")
rf_best
rf_auc <- rf_res %>%
collect_predictions(parameters = rf_best) %>%
roc_curve(Diagnosis, .pred_Hepatitis) %>%
mutate(model = "Random Forest")
autoplot(rf_auc)
autoplot(cm_optimized, type = "heatmap")
