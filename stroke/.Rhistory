library(tideverse)
install.packages("tideverse")
install.packages("tidyverse")
library(tidyverse)
library(GGally)
df <- read_csv("data/healthcare-dataset-stroke-data.csv")
df
summary(df)
install.packages("skimr")
skimr::skim_to_wide(df)
View(df)
?read_csv
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfiddccddcf", na = "N/A")
problems()
colspec <- "ccdnncccddcf"
length(colspec)
nchar(colspec)
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "ccdnncccddcf", na = "N/A")
skimr::skim_to_wide(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
#library(GGally)
GGally::ggpairs(df, aes(color = stroke, alpha=0.2, dotsize=0.02),
upper = list(continuous = wrap("cor", size = 2.5)),
diag=list(continuous ="barDiag"))+
scale_color_brewer(palette = "Set1")+
scale_fill_brewer(palette = "Set1")
df$id <- NULL
GGally::ggpairs(df, aes(color = stroke, alpha=0.2, dotsize=0.02),
upper = list(continuous = wrap("cor", size = 2.5)),
diag=list(continuous ="barDiag"))+
scale_color_brewer(palette = "Set1")+
scale_fill_brewer(palette = "Set1")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(caret)
#library(GGally)
GGally::ggpairs(df, aes(color = stroke, alpha=0.2, dotsize=0.02),
upper = list(continuous = wrap("cor", size = 2.5)),
diag=list(continuous ="barDiag"))+
scale_color_brewer(palette = "Set1")+
scale_fill_brewer(palette = "Set1")
GGally::ggpairs(df, aes(color = stroke, alpha=0.2, dotsize=0.02),
upper = list(continuous = wrap("cor", size = 2.5)),
diag=list(continuous ="barDiag"))+
scale_color_brewer(palette = "Set1")+
scale_fill_brewer(palette = "Set1")
names(df)
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "ccdffcccddcf", na = "N/A")
skimr::skim_to_wide(df)
df$id <- NULL
GGally::ggpairs(df, aes(color = stroke, alpha=0.2, dotsize=0.02),
upper = list(continuous = wrap("cor", size = 2.5)),
diag=list(continuous ="barDiag"))+
scale_color_brewer(palette = "Set1")+
scale_fill_brewer(palette = "Set1")
df
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddff", na = "N/A")
df
skimr::skim_to_wide(df)
df$id <- NULL
skimr::skim_to_wide(df)
df$smoking_status <- ifelse(df$smoking_status == "Unknown", NA, df$smoking_status)
df
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddff", na = "N/A")
df
df$smoking_status <- if_else(df$smoking_status == "Unknown", NA, df$smoking_status)
?if_else
df$smoking_status <- if_else(df$smoking_status == "Unknown", NA, smoking_status)
df$smoking_status <- if_else(smoking_status == "Unknown", NA, smoking_status)
?na_if
na_if(df$smoking_status, "Unknown")
na_if(df$smoking_status, "Unknown")[1:10]
df$smoking_status <- na_if(df$smoking_status, "Unknown")
df$smoking_status <- fct_relevel(df$smoking_status, c("never smoked", "formerly smoked", "smokes"))
df$id <- NULL
skimr::skim_to_wide(df)
GGally::ggpairs(df, aes(color = stroke, alpha=0.2, dotsize=0.02),
upper = list(continuous = wrap("cor", size = 2.5)),
diag=list(continuous ="barDiag"))+
scale_color_brewer(palette = "Set1")+
scale_fill_brewer(palette = "Set1")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(caret)
#library(GGally)
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddff", na = "N/A")
df
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddff", na = c("Unknown", "N/A"))
df
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddff", na = c("Unknown", "N/A"))
df
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A"))
df
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A"))
# if you set smoking_status to factor in col_types, na() won't work
df$smoking_status <- as_factor(df$smoking_status)
df
df$id <- NULL
skimr::skim_to_wide(df)
summry(df)
summary(df)
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A"))
# if you set smoking_status to factor in col_types, na() won't work
df$smoking_status <- as_factor(df$smoking_status)
df$smoking_status <- fct_relevel(df$smoking_status, c("never smoked", "formerly smoked", "smokes"))
df
df$id <- NULL
skimr::skim_to_wide(df)
GGally::ggpairs(df, aes(color = stroke, alpha=0.2, dotsize=0.02),
upper = list(continuous = wrap("cor", size = 2.5)),
diag=list(continuous ="barDiag"))+
scale_color_brewer(palette = "Set1")+
scale_fill_brewer(palette = "Set1")
GGally::ggpairs(df, aes(color = stroke, alpha=0.2, dotsize=0.02),
upper = list(continuous = GGally::wrap("cor", size = 2.5)),
diag=list(continuous ="barDiag"))+
scale_color_brewer(palette = "Set1")+
scale_fill_brewer(palette = "Set1")
GGally::ggpairs(df, aes(color = stroke, alpha=0.2, dotsize=0.02),
upper = list(continuous = GGally::wrap("cor", size = 2.5)),
diag=list(continuous ="barDiag"))+
scale_color_brewer(palette = "Set1")+
scale_fill_brewer(palette = "Set1")
df$id <- NULL
skimr::skim_to_wide(df)
install.packages("DMwR")
install.packages( "/Users/andgu885/Downloads/DMwR_0.4.1.tar.gz", repos=NULL, type="source" )
install.packages(c("xts", "quantmod"))
install.packages( "/Users/andgu885/Downloads/DMwR_0.4.1.tar.gz", repos=NULL, type="source" )
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(caret)
#library(GGally)
library(DMwR) # installed via archive: install.packages("/Path/to/DMwR_0.4.1.tar.gz", repos=NULL, type="source" )
to_scale <- df %>% select(avg_glucose_level, age, bmi) %>% scale()
to_scale
to_dum <- df %>% select(ever_married, work_type) %>% dummyVars()
to_dum <- df %>% select(ever_married, work_type)
dummyVars(to_dum)
dummyVars(data=to_dum)
?dummyVars
dummyVars(~ ever_marries + work_type, data=to_dum)
dummyVars(~ ever_marries + work_type, data=to_dum)
dummyVars(~ ever_married + work_type, data=to_dum)
dum <- dummyVars(~ ever_married + work_type, data=to_dum)
dum
install.packages("dummies")
data.frame(predict(dum, newdata=to_dum))
View(df)
head(df)
rm(dum)
# select vars
to_dum <- df %>% select(gender, ever_married, work_type, Residence_type, smoking_status)
# make an obj
dummies <- dummyVars(~ ., data=to_dum)
# apply it
dummy_df <- data.frame(predict(dummies, newdata=to_dum))
head(dummy_df)
df_scaled <- df %>% select(avg_glucose_level, age, bmi) %>% scale() %>% data_frame()
View(df_scaled)
dim(df_scaled)
df_scaled <- df %>% select(avg_glucose_level, age, bmi) %>% scale() %>% data.frame()
dim(df_scaled)
# select vars
to_dum <- df %>% select(gender, ever_married, work_type, Residence_type, smoking_status)
# make an obj
dummies <- dummyVars(~ ., data=to_dum)
# apply it
df_dummy <- data.frame(predict(dummies, newdata=to_dum))
head(df_dummy)
head(df)
df_proc <- bind_rows(df_scaled, df_dummy, select(df, hypertension, heart_disease, stroke))
df_proc
df_proc <- bind_cols(df_scaled, df_dummy, select(df, hypertension, heart_disease, stroke))
df_proc
df_proc %>%
mutate(bmi = ifelse(is.na(bmi), median(bmi, na.rm = TRUE), bmi))
df_proc <- df_proc %>%
mutate(bmi = ifelse(is.na(bmi), median(bmi, na.rm = TRUE), bmi))
library(DMwR)
set.seed(1234)
sample_set <- createDataPartition(y = df_proc$stroke, p = .75, list = FALSE)
income_train <- df_proc[sample_set,]
income_test <- df_proc[-sample_set,]
# DMwR::SMOTE for imbalanced data
income_train <- SMOTE(stroke ~ ., data.frame(income_train), perc.over = 100, perc.under = 200)
set.seed(1234)
sample_set <- createDataPartition(y = df_proc$stroke, p = .75, list = FALSE)
df_train <- df_proc[sample_set,]
df_test <- df_proc[-sample_set,]
# DMwR::SMOTE for imbalanced data
df_train <- SMOTE(stroke ~ ., data.frame(income_train), perc.over = 100, perc.under = 200)
set.seed(1234)
sample_set <- createDataPartition(y = df_proc$stroke, p = .75, list = FALSE)
df_train <- df_proc[sample_set,]
df_test <- df_proc[-sample_set,]
# DMwR::SMOTE for imbalanced data
df_train <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 100, perc.under = 200)
summary(df_train)
summary(df_test)
fit_ctrl_xgb_roc <- trainControl(## 5-fold CV
method = "repeatedcv",
number = 5,
repeats = 5,
allowParallel = T,
classProbs = T,
summaryFunction = twoClassSummary)
fit_xgb <- train(stroke ~ .,
data = df_train,
metric = "ROC",
method = "xgbDART",
trControl = fit_ctrl_xgb_roc,
verbosity = 0,
verbose = FALSE)
fit_xgb <- train(stroke ~ .,
data = df_train,
metric = "ROC",
method = "RF",
trControl = fit_ctrl_xgb_roc,
verbosity = 0,
verbose = FALSE)
