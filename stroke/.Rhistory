perf_roc <- performance(pred_roc, measure="tpr", x.measure = "fpr")
return(perf_roc)
}
# calculate ROC
perf_roc_rf <- get_roc(fit_rf_roc, df_test)
get_roc <- function(fit.obj, testing.df){
pred_prob <- predict.train(fit.obj, newdata = testing.df, type="prob")
pred_roc <- prediction(predictions = pred_prob$yes, labels = testing.df$stroke)
perf_roc <- performance(pred_roc, measure="tpr", x.measure = "fpr")
return(perf_roc)
}
# calculate ROC
perf_roc_rf <- get_roc(fit_rf_roc, df_test)
# take AUC
auc_rf <- round(unlist(slot(performance(pred_roc_rf, measure = "auc"), "y.values")), 3)
get_roc <- function(fit.obj, testing.df){
pred_prob <- predict.train(fit.obj, newdata = testing.df, type="prob")
pred_roc <- prediction(predictions = pred_prob$yes, labels = testing.df$stroke)
perf_roc <- performance(pred_roc, measure="tpr", x.measure = "fpr")
return(list(perf_roc, pred_prob))
}
# calculate ROC
perf_pred <- get_roc(fit_rf_roc, df_test)
perf_roc_rf <- perf_pred[[1]]
pred_roc_df <- perf_pred[[2]]
# take AUC
auc_rf <- round(unlist(slot(performance(pred_roc_rf, measure = "auc"), "y.values")), 3)
# calculate ROC
perf_pred <- get_roc(fit_rf_roc, df_test)
perf_roc_rf <- perf_pred[[1]]
pred_roc_rf <- perf_pred[[2]]
# take AUC
auc_rf <- round(unlist(slot(performance(pred_roc_rf, measure = "auc"), "y.values")), 3)
get_roc <- function(fit.obj, testing.df){
pred_prob <- predict.train(fit.obj, newdata = testing.df, type="prob")
pred_roc <- prediction(predictions = pred_prob$yes, labels = testing.df$stroke)
perf_roc <- performance(pred_roc, measure="tpr", x.measure = "fpr")
return(list(perf_roc, pred_roc))
}
# calculate ROC
perf_pred <- get_roc(fit_rf_roc, df_test)
perf_roc_rf <- perf_pred[[1]]
pred_roc_rf <- perf_pred[[2]]
# take AUC
auc_rf <- round(unlist(slot(performance(pred_roc_rf, measure = "auc"), "y.values")), 3)
# plot
plot(perf_roc_rf, main = "RF ROC curve", col = "steelblue", lwd = 3)
abline(a = 0, b = 1, lwd = 3, lty = 2, col = 1)
legend(x = 0.8, y = 0.3, legend = paste0("AUC = ", auc_rf))
# calculate ROC
perf_pred <- get_roc(fit_rf_roc, df_test)
perf_roc_rf <- perf_pred[[1]]
pred_roc_rf <- perf_pred[[2]]
# take AUC
auc_rf <- round(unlist(slot(performance(pred_roc_rf, measure = "auc"), "y.values")), 3)
# plot
plot(perf_roc_rf, main = "RF ROC curve", col = "steelblue", lwd = 3)
abline(a = 0, b = 1, lwd = 3, lty = 2, col = 1)
legend(x = 0.7, y = 0.3, legend = paste0("AUC = ", auc_rf))
# calculate ROC
perf_pred <- get_roc(fit_xgb_roc, df_test)
perf_roc_xgb <- perf_pred[[1]]
pred_roc_xgb <- perf_pred[[2]]
# take AUC
auc_xgb <- round(unlist(slot(performance(pred_roc_xgb, measure = "auc"), "y.values")), 3)
# plot
plot(perf_roc_xgb, main = "XGB ROC curve", col = "steelblue", lwd = 3)
abline(a = 0, b = 1, lwd = 3, lty = 2, col = 1)
legend(x = 0.7, y = 0.3, legend = paste0("AUC = ", auc_xgb))
load("~/GitProjects/ML-projects/stroke/workspace.RData")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = T)
library(tidyverse)
library(caret)
#library(GGally)
library(DMwR) # installed via archive: install.packages("/Path/to/DMwR_0.4.1.tar.gz", repos=NULL, type="source" )
library(ROCR)
skimr::skim_to_wide(df)
GGally::ggpairs(df, aes(color = stroke, alpha = 0.2, dotsize = 0.02),
upper = list(continuous = GGally::wrap("cor", size = 2.5)),
diag = list(continuous = "barDiag")) +
scale_color_brewer(palette = "Set1", direction = -1) +
scale_fill_brewer(palette = "Set1", direction = -1)
View(df)
ggplot(df, aes(stroke, gender))+
geom_count()
?geom_count
ggplot(df, aes(stroke, gender))+
geom_count(aes(size = after_stat(prop)))
ggplot(df, aes(stroke, gender))+
geom_count()
ggplot(df, aes(stroke, gender))+
geom_count(fill="steelblue")
ggplot(df, aes(stroke, gender))+
geom_count(color="steelblue")
uniqye(df$gender)
unique(df$gender)
df <- df %>% filter(gender != "Other")
unique(df$gender)
GGally::ggpairs(df, aes(color = stroke, alpha = 0.2, dotsize = 0.02),
upper = list(continuous = GGally::wrap("cor", size = 2.5)),
diag = list(continuous = "barDiag")) +
scale_color_brewer(palette = "Set1", direction = -1) +
scale_fill_brewer(palette = "Set1", direction = -1)
ggplot(df, aes(stroke, gender))+
geom_count(color="steelblue")
ggplot(df, aes(stroke, gender))+
geom_count(color="steelblue", shape=1)
ggplot(df, aes(stroke, gender))+
geom_count(color="steelblue", shape=2)
ggplot(df, aes(stroke, gender))+
geom_count(color="steelblue", shape=3)
ggplot(df, aes(stroke, gender))+
geom_count(color="steelblue", shape=22)
ggplot(df, aes(stroke, gender))+
geom_count(color="steelblue", shape=0)
ggplot(df, aes(stroke, gender))+
geom_count(color="steelblue")
gender <- df %>% group_by(stroke, gender) %>% summarize(N=n())
gender
ggplot(gender, aes(stroke, N)) +
geom_bar(aes(fill=gender), stat = "identity")
ggplot(gender, aes(stroke, N)) +
geom_bar(aes(fill=gender), stat = "identity")+
scale_fill_brewer(palette = "Set1", direction = -1)
ggplot(gender, aes(stroke, N)) +
geom_bar(aes(fill=gender), alpha = 0.8, stat = "identity")+
scale_fill_brewer(palette = "Set1", direction = -1)
ggplot(gender, aes(stroke, N)) +
geom_bar(aes(fill=gender), alpha = 0.8, stat = "identity")+
scale_fill_brewer(palette = "Set2", direction = -1)
ggplot(gender, aes(stroke, N)) +
geom_bar(aes(fill=gender), alpha = 0.8, stat = "identity", position = "fill")+
scale_fill_brewer(palette = "Set2", direction = -1)
ggplot(gender, aes(stroke, N)) +
geom_bar(aes(fill=gender), alpha = 0.8, stat = "identity", position = "fill")+
scale_fill_brewer(palette = "Set2", direction = -1)+
ylab("proportion")
ggplot(df, aes(stroke, age)) +
geom_boxplot(aes(fill = gender))
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.8)+
geom_point(alpha=0.5)
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_point(alpha=0.5)
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.3, size=1)
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.1, size=1)
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.1, size=0.8)
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.1, size=0.8, width = 2)
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.1, size=0.8, width = 0.2)
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.1, size=0.8, width = 0.2, aes(fill = gender))
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.1, size=0.8, width = 0.2, aes(color = gender))
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.4, size=0.8, width = 0.2, aes(color = gender))
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_point(alpha=0.4, size=0.8, width = 0.2, aes(color = gender))
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_point(alpha=0.4, size=0.8, width = 0.15, height = 0.1, aes(color = gender))
ggplot(df, aes(stroke, age)) +
geom_boxplot()+
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.4, size=0.8, width = 0.15, height = 0.1, aes(color = gender))
ggplot(df, aes(stroke, age)) +
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.4, size=0.8, width = 0.15, height = 0.1, aes(color = gender)) +
geom_boxplot()
ggplot(df, aes(stroke, age)) +
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.4, size=0.8, width = 0.15, height = 0.1, aes(color = gender)) +
geom_boxplot(alpha = 0.5)
ggplot(df, aes(stroke, age)) +
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.4, size=0.8, width = 0.15, height = 0.1, aes(color = gender)) +
geom_boxplot(alpha = 0.2)
ggplot(df, aes(stroke, age)) +
geom_violin(alpha=0.3)+
geom_jitter(alpha=0.2, size=0.8, width = 0.15, height = 0.1, aes(color = gender)) +
geom_boxplot(alpha = 0.2)
ggplot(df, aes(stroke, age)) +
geom_violin(alpha=0.3) +
geom_jitter(alpha=0.2, size=0.8, width = 0.15, height = 0.1, aes(color = gender)) +
geom_boxplot(alpha = 0.2) +
scale_color_brewer(palette = "Set2", direction = -1)
hyptens <- df %>% group_by(stroke, hypertension) %>% summarize(N=n())
hyptens
hyptens <- df %>% group_by(stroke, hypertension) %>% summarize(N=n())
hyptens
ggplot(gender, aes(stroke, N)) +
geom_bar(aes(fill=hypertension), alpha = 0.8, stat = "identity", position = "fill")+
scale_fill_brewer(palette = "Set3", direction = -1)+
ylab("proportion")
ggplot(hyptens, aes(stroke, N)) +
geom_bar(aes(fill=hypertension), alpha = 0.8, stat = "identity", position = "fill")+
scale_fill_brewer(palette = "Set3", direction = -1)+
ylab("proportion")
ggplot(hyptens, aes(stroke, N)) +
geom_bar(aes(fill=hypertension), alpha = 0.8, stat = "identity", position = "fill")+
scale_fill_brewer(palette = "Set1", direction = -1)+
ylab("proportion")
ggplot(hyptens, aes(stroke, N)) +
geom_bar(aes(fill=hypertension), alpha = 0.8, stat = "identity", position = "fill")+
scale_fill_brewer(palette = "Set2", direction = -1)+
ylab("proportion")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = T)
library(tidyverse)
library(caret)
#library(GGally)
library(DMwR) # installed via archive: install.packages("/Path/to/DMwR_0.4.1.tar.gz", repos=NULL, type="source" )
library(ROCR)
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A"))
# if you set smoking_status to factor in col_types, na() won't work
df$smoking_status <- as_factor(df$smoking_status)
df$smoking_status <- fct_relevel(df$smoking_status, c("never smoked", "formerly smoked", "smokes"))
df$stroke <- factor(ifelse(df$stroke == 1, "yes", "no"), levels = c("no", "yes"))
df
df$id <- NULL
skimr::skim_to_wide(df)
df <- df %>% filter(gender != "Other")
gender <- df %>% group_by(stroke, gender) %>% summarize(N=n())
ggplot(gender, aes(stroke, N)) +
geom_bar(aes(fill=gender), alpha = 0.8, stat = "identity", position = "fill")+
scale_fill_brewer(palette = "Set2", direction = -1)+
ylab("proportion")
ggplot(df, aes(stroke, age)) +
geom_violin(alpha=0.3) +
geom_jitter(alpha=0.2, size=0.8, width = 0.15, height = 0.1, aes(color = gender)) +
geom_boxplot(alpha = 0.2) +
scale_color_brewer(palette = "Set2", direction = -1)
hyptens <- df %>% group_by(stroke, hypertension) %>% summarize(N=n())
hyptens
ggplot(hyptens, aes(stroke, N)) +
geom_bar(aes(fill=hypertension), alpha = 0.8, stat = "identity", position = "fill")+
scale_fill_brewer(palette = "Set2", direction = -1)+
ylab("proportion")
GGally::ggpairs(df, aes(color = stroke, alpha = 0.2, dotsize = 0.02),
upper = list(continuous = GGally::wrap("cor", size = 2.5)),
diag = list(continuous = "barDiag")) +
scale_color_brewer(palette = "Set1", direction = -1) +
scale_fill_brewer(palette = "Set1", direction = -1)
df_scaled <- df %>% select(avg_glucose_level, age, bmi) %>% scale() %>% data.frame()
# select vars
to_dum <- df %>% select(gender, ever_married, work_type, Residence_type)
# make an obj
dummies <- dummyVars(~ ., data=to_dum)
# apply it
df_dummy <- data.frame(predict(dummies, newdata=to_dum))
head(df_dummy)
df_proc <- bind_cols(df_scaled, df_dummy, select(df, hypertension, heart_disease, stroke))
df_proc
df_proc <- df_proc %>%
mutate(bmi = ifelse(is.na(bmi), median(bmi, na.rm = TRUE), bmi))
set.seed(1234)
sample_set <- createDataPartition(y = df_proc$stroke, p = .75, list = FALSE)
df_train <- df_proc[sample_set,]
df_test <- df_proc[-sample_set,]
# DMwR::SMOTE for imbalanced data
df_train <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 100, perc.under = 200)
df_train %>% group_by(stroke) %>% summarise(N=n())
df_train <- df_proc[sample_set,]
df_test <- df_proc[-sample_set,]
df_train %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 100, perc.under = 200)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 1000, perc.under = 1000)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 1000, perc.under = 2000)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 200, perc.under = 200)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 300, perc.under = 200)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 250, perc.under = 200)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 200)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 220)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 180)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
View(df_test)
df_test%>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 190)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 195)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 19)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 190)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 180)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 170)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 160)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 150)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data: over=225 and under=150 give me 1:1 ratio
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 450, perc.under = 300)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data: over=225 and under=150 give me 1:1 ratio
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 2250, perc.under = 1500)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data: over=225 and under=150 give me 1:1 ratio
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 150)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
df_test %>% group_by(stroke) %>% summarise(N=n())
# DMwR::SMOTE for imbalanced data: over=225 and under=150 give me 1:1 ratio
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 150)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
fit_ctrl_xgb_roc <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 5,
repeats = 10,
allowParallel = T,
classProbs = T,
summaryFunction = twoClassSummary)
fit_ctrl_xgb_kappa <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 5,
repeats = 10,
allowParallel = T)
set.seed(1234)
sample_set <- createDataPartition(y = df_proc$stroke, p = .75, list = FALSE)
df_train <- df_proc[sample_set,]
df_test <- df_proc[-sample_set,]
# DMwR::SMOTE for imbalanced data: over=225 and under=150 give me 1:1 ratio
df_train_smote <- SMOTE(stroke ~ ., data.frame(df_train), perc.over = 225, perc.under = 150)
df_train_smote %>% group_by(stroke) %>% summarise(N=n())
set.seed(123)
fit_rf_roc <- train(stroke ~ .,
data = df_train,
metric = "ROC",
method = "rf",
trControl = fit_ctrl_xgb_roc,
verbosity = 0,
verbose = FALSE)
set.seed(123)
fit_rf_acc <- train(stroke ~ .,
data = df_train,
metric = "Kappa",
method = "rf",
trControl = fit_ctrl_xgb_kappa,
verbosity = 0,
verbose = FALSE)
seq(15, 18, 1)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = F)
library(tidyverse)
library(caret)
#library(GGally)
library(DMwR) # installed via archive: install.packages("/Path/to/DMwR_0.4.1.tar.gz", repos=NULL, type="source" )
library(ROCR)
ggplot(df, aes(stroke, age)) +
geom_boxplot(aes(fill = stroke), alpha = 0.5) +
geom_violin(aes(fill = stroke), alpha = 0.5) +
scale_fill_brewer(palette = "Set1")
ggplot(df, aes(stroke, age)) +
geom_boxplot(aes(fill = stroke), alpha = 0.5) +
geom_violin(aes(fill = stroke), alpha = 0.5) +
scale_fill_brewer(palette = "Set1")+
xlab("")
ggplot(df, aes(stroke, age)) +
geom_boxplot(aes(fill = stroke), alpha = 0.5) +
geom_violin(aes(fill = stroke), alpha = 0.5) +
scale_fill_brewer(palette = "Set1", direction = -1) +
xlab("")
ggplot(df, aes(stroke, bmi)) +
geom_boxplot(aes(fill = stroke), alpha = 0.5) +
geom_violin(aes(fill = stroke), alpha = 0.5) +
scale_fill_brewer(palette = "Set1", direction = -1) +
xlab("")
ggplot(df, aes(stroke, age)) +
geom_boxplot(aes(fill = stroke), alpha = 0.5, varwidth = T) +
geom_violin(aes(fill = stroke), alpha = 0.5) +
scale_fill_brewer(palette = "Set1", direction = -1) +
xlab("")
ggplot(df, aes(stroke, bmi)) +
geom_boxplot(aes(fill = stroke), alpha = 0.5, varwidth = T, notch = T) +
geom_violin(aes(fill = stroke), alpha = 0.5) +
scale_fill_brewer(palette = "Set1", direction = -1) +
xlab("")
ggplot(df, aes(stroke, age)) +
geom_boxplot(aes(fill = stroke), alpha = 0.5, varwidth = T, notch = T) +
geom_violin(aes(fill = stroke), alpha = 0.5) +
scale_fill_brewer(palette = "Set1", direction = -1) +
xlab("")
load("~/Projects/ML-projects/stroke/workspace.RData")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = F)
library(tidyverse)
library(caret)
#library(GGally)
library(DMwR) # installed via archive: install.packages("/Path/to/DMwR_0.4.1.tar.gz", repos=NULL, type="source" )
library(ROCR)
df$id <- NULL
skimr::skim_to_wide(df)
df %>% group_by(stroke, smoking_status) %>% summarise(N=n())
df %>% group_by(stroke, bmi) %>% summarise(N=n())
df %>% filter(is.na(bmi)) %>% group_by(stroke) %>% summarise(N=n())
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = F)
library(tidyverse)
library(caret)
#library(GGally)
library(DMwR) # installed via archive: install.packages("/Path/to/DMwR_0.4.1.tar.gz", repos=NULL, type="source" )
library(ROCR)
df <- read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A"))
# if you set smoking_status to factor in col_types, na() won't work
df$smoking_status <- as_factor(df$smoking_status)
df$smoking_status <- fct_relevel(df$smoking_status, c("never smoked", "formerly smoked", "smokes"))
df$stroke <- factor(ifelse(df$stroke == 1, "yes", "no"), levels = c("no", "yes"))
df
df$id <- NULL
skimr::skim_to_wide(df)
df %>% group_by(stroke, smoking_status) %>% summarise(N=n())
ggplot(df, aes(stroke, age)) +
geom_violin(alpha=0.3) +
geom_jitter(alpha=0.2, size=0.8, width = 0.15, height = 0.1, aes(color = gender)) +
geom_boxplot(alpha = 0.2) +
scale_color_brewer(palette = "Set2", direction = -1)
df <- df %>% filter(gender != "Other")
ggplot(df, aes(stroke, age)) +
geom_violin(alpha=0.3) +
geom_jitter(alpha=0.2, size=0.8, width = 0.15, height = 0.1, aes(color = gender)) +
geom_boxplot(alpha = 0.2) +
scale_color_brewer(palette = "Set2", direction = -1)
ggplot(df, aes(stroke, avg_glucose_level)) +
geom_boxplot(aes(fill = stroke), alpha = 0.5, varwidth = T, notch = T) +
geom_violin(aes(fill = stroke), alpha = 0.5) +
scale_fill_brewer(palette = "Set1", direction = -1) +
xlab("")
load("~/Projects/ML-projects/stroke/workspace.RData")
fit_rf_roc
imp_vars_rf <- varImp(fit_rf_roc)
plot(imp_vars_rf, main="Variable Importance with RF")
cm_rf_roc
fit_xgb_roc$bestTune
imp_vars_xgb <- varImp(fit_xgb_roc)
plot(imp_vars_xgb, main="Variable Importance with XGB")
plot(imp_vars_xgb, main="Variable Importance with XGB")
cm_xgb_roc
get_roc <- function(fit.obj, testing.df){
pred_prob <- predict.train(fit.obj, newdata = testing.df, type="prob")
pred_roc <- prediction(predictions = pred_prob$yes, labels = testing.df$stroke)
perf_roc <- performance(pred_roc, measure="tpr", x.measure = "fpr")
return(list(perf_roc, pred_roc))
}
# calculate ROC
perf_pred <- get_roc(fit_rf_roc, df_test)
perf_roc_rf <- perf_pred[[1]]
pred_roc_rf <- perf_pred[[2]]
# take AUC
auc_rf <- round(unlist(slot(performance(pred_roc_rf, measure = "auc"), "y.values")), 3)
# plot
plot(perf_roc_rf, main = "RF ROC curve", col = "steelblue", lwd = 3)
abline(a = 0, b = 1, lwd = 3, lty = 2, col = 1)
legend(x = 0.7, y = 0.3, legend = paste0("AUC = ", auc_rf))
# calculate ROC
perf_pred <- get_roc(fit_xgb_roc, df_test)
perf_roc_xgb <- perf_pred[[1]]
pred_roc_xgb <- perf_pred[[2]]
# take AUC
auc_xgb <- round(unlist(slot(performance(pred_roc_xgb, measure = "auc"), "y.values")), 3)
# plot
plot(perf_roc_xgb, main = "XGB ROC curve", col = "steelblue", lwd = 3)
abline(a = 0, b = 1, lwd = 3, lty = 2, col = 1)
legend(x = 0.7, y = 0.3, legend = paste0("AUC = ", auc_xgb))
