bake() # df_train will be processed
new_data = NULL
# the other way is to apply the recipe to your data immediately
# prep & bake
train_data <- prep_recipe %>%
prep(training = df_train) %>%
bake(new_data = NULL) # df_train will be processed
names(df)
prep_recipe <- recipe(stroke ~ ., data = df_train) %>%
step_impute_bag(bmi, smoking_status) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
#step_impute_bag(all_predictors()) %>%
step_normalize(age, avg_glucose_level, bmi) %>%
step_smote(stroke, over_ratio = 1, seed = 100) %>%
check_missing(all_predictors()) %>%
step_zv(all_predictors())
prep_recipe
# the other way is to apply the recipe to your data immediately
# prep & bake
train_data <- prep_recipe %>%
prep(training = df_train) %>%
bake(new_data = NULL) # df_train will be processed
train_data
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = F)
library(tidymodels)
library(skimr)
library(vip)
library(probably)
library(themis)
# recipe for LR
lr_recipe <- prep_recipe %>%
step_corr(threshold = 0.75)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = F)
library(tidymodels)
library(skimr)
library(vip)
library(probably)
library(themis)
# upon quick look at the data set
# if you set smoking_status to factor in col_types, na() won't work
# remove ID
# output to a factor
df <-
readr::read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A")) %>%
mutate(smoking_status = factor(smoking_status),
stroke = factor(ifelse(stroke == 1, "yes", "no"), levels = c("yes", "no"))) %>%
select(-id)
df
# upon quick look at the data set
# if you set smoking_status to factor in col_types, na() won't work
# remove ID
# output to a factor
df <-
readr::read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A")) %>%
mutate(smoking_status = factor(smoking_status),
stroke = factor(ifelse(stroke == 1, "stroke", "no_stroke"), levels = c("stroke", "no_stroke"))) %>%
select(-id) %>%
rename("Diagnosis" = stroke)
df
df <- df %>% filter(gender != "Other")
skim(df) %>%
yank("numeric")
# upon quick look at the data set
# if you set smoking_status to factor in col_types, na() won't work
# remove ID
# output to a factor
df <-
readr::read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A")) %>%
mutate(smoking_status = factor(smoking_status),
stroke = factor(ifelse(stroke == 1, "yes", "no"), levels = c("yes", "no"))) %>%
select(-id)
df
# upon quick look at the data set
# if you set smoking_status to factor in col_types, na() won't work
# remove ID, Sex == Other
# output to a factor
df <-
readr::read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A")) %>%
mutate(smoking_status = factor(smoking_status),
stroke = factor(ifelse(stroke == 1, "yes", "no"), levels = c("yes", "no"))) %>%
select(-id) %>%
filter(Sex != "Other")
# upon quick look at the data set
# if you set smoking_status to factor in col_types, na() won't work
# remove ID, Sex == Other
# output to a factor
df <-
readr::read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A")) %>%
mutate(smoking_status = factor(smoking_status),
stroke = factor(ifelse(stroke == 1, "yes", "no"), levels = c("yes", "no"))) %>%
select(-id) %>%
filter(Gender != "Other")
# upon quick look at the data set
# if you set smoking_status to factor in col_types, na() won't work
# remove ID, Sex == Other
# output to a factor
df <-
readr::read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A")) %>%
mutate(smoking_status = factor(smoking_status),
stroke = factor(ifelse(stroke == 1, "yes", "no"), levels = c("yes", "no"))) %>%
select(-id)
#filter(Gender != "Other")
df
# upon quick look at the data set
# if you set smoking_status to factor in col_types, na() won't work
# remove ID, Sex == Other
# output to a factor
df <-
readr::read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A")) %>%
mutate(smoking_status = factor(smoking_status),
stroke = factor(ifelse(stroke == 1, "yes", "no"), levels = c("yes", "no"))) %>%
select(-id) %>%
filter(gender != "Other")
df
skim(df) %>%
yank("factor")
# upon quick look at the data set
# if you set smoking_status to factor in col_types, na() won't work
# remove ID, Sex == Other
# output to a factor
df <-
readr::read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A")) %>%
mutate(smoking_status = factor(smoking_status),
stroke = factor(ifelse(stroke == 1, "yes", "no"), levels = c("yes", "no"))) %>%
select(-id)
df
set.seed(124)
data_split <- initial_split(df, prop = 3/4, strata = stroke)
df_train <- training(data_split)
df_test <- testing(data_split)
prep_recipe <- recipe(stroke ~ ., data = df_train) %>%
step_impute_bag(bmi, smoking_status) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
#step_impute_bag(all_predictors()) %>%
step_normalize(age, avg_glucose_level, bmi) %>%
step_smote(stroke, over_ratio = 1, seed = 100) %>%
check_missing(all_predictors()) %>%
step_zv(all_predictors())
prep_recipe
# recipe for LR
lr_recipe <- prep_recipe %>%
step_corr(threshold = 0.75)
lr_recipe
# recipe for LR
lr_recipe <- prep_recipe %>%
step_corr(all_predictors(), threshold = 0.75)
lr_recipe
# recipe for LR
lr_recipe <- prep_recipe %>%
step_corr(all_predictors(), threshold = 0.75)
# set model type/engine
lr_mod <- logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# define the workflow
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
# create a tune grid
lr_reg_grid <- tibble(penalty = 10**seq(-4, 0, length.out = 30))
# train and tune the model
lr_res <- tune_grid(lr_workflow,
grid = lr_reg_grid,
resamples = cv_folds,
control = control_grid(save_pred = TRUE),
metrics = cls_metrics)
# Stratified, repeated 10-fold cross-validation
cv_folds <- vfold_cv(df_train, strata = "resistance", v = 10, repeats = 10)
# Stratified, repeated 10-fold cross-validation
cv_folds <- vfold_cv(df_train, strata = "stroke", v = 10, repeats = 10)
# recipe for LR
lr_recipe <- prep_recipe %>%
step_corr(all_predictors(), threshold = 0.75)
# set model type/engine
lr_mod <- logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# define the workflow
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
# create a tune grid
lr_reg_grid <- tibble(penalty = 10**seq(-4, 0, length.out = 30))
# train and tune the model
lr_res <- tune_grid(lr_workflow,
grid = lr_reg_grid,
resamples = cv_folds,
control = control_grid(save_pred = TRUE),
metrics = cls_metrics)
# Stratified, repeated 10-fold cross-validation
cv_folds <- vfold_cv(df_train, strata = "stroke", v = 10, repeats = 10)
# metrics
cls_metrics <- metric_set(roc_auc, j_index)
set.seed(345)
# Stratified, repeated 10-fold cross-validation
cv_folds <- vfold_cv(df_train, strata = "stroke", v = 10, repeats = 10)
# metrics
cls_metrics <- metric_set(roc_auc, j_index)
# recipe for LR
lr_recipe <- prep_recipe %>%
step_corr(all_predictors(), threshold = 0.75)
# set model type/engine
lr_mod <- logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# define the workflow
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
# create a tune grid
lr_reg_grid <- tibble(penalty = 10**seq(-4, 0, length.out = 30))
# train and tune the model
lr_res <- tune_grid(lr_workflow,
grid = lr_reg_grid,
resamples = cv_folds,
control = control_grid(save_pred = TRUE),
metrics = cls_metrics)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = F)
library(tidymodels)
library(skimr)
library(vip)
library(probably)
library(themis)
# upon quick look at the data set
# if you set smoking_status to factor in col_types, na() won't work
# remove ID, Sex == Other
# output to a factor
df <-
readr::read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A")) %>%
mutate(smoking_status = factor(smoking_status),
stroke = factor(ifelse(stroke == 1, "yes", "no"), levels = c("yes", "no"))) %>%
select(-id)
df
set.seed(124)
data_split <- initial_split(df, prop = 3/4, strata = stroke)
df_train <- training(data_split)
df_test <- testing(data_split)
set.seed(345)
# Stratified, repeated 10-fold cross-validation
cv_folds <- vfold_cv(df_train, strata = "stroke", v = 10, repeats = 10)
# metrics
cls_metrics <- metric_set(roc_auc, j_index)
prep_recipe <- recipe(stroke ~ ., data = df_train) %>%
step_impute_bag(bmi, smoking_status) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
#step_impute_bag(all_predictors()) %>%
step_normalize(age, avg_glucose_level, bmi) %>%
step_smote(stroke, over_ratio = 1, seed = 100) %>%
check_missing(all_predictors()) %>%
step_zv(all_predictors())
prep_recipe
cv_folds
library(tidyverse)
load("data/models.RData")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = F)
library(tidymodels)
library(skimr)
library(vip)
library(probably)
library(themis)
autoplot(xgb_auc)
xgb_auc <- xgb_res %>%
collect_predictions(parameters = xgb_best) %>%
roc_curve(stroke, .pred_yes) %>%
mutate(model = "Boosted Trees")
xgb_best <- xgb_res %>%
select_best(metric = "roc_auc")
xgb_auc <- xgb_res %>%
collect_predictions(parameters = xgb_best) %>%
roc_curve(stroke, .pred_yes) %>%
mutate(model = "Boosted Trees")
autoplot(xgb_auc)
bind_rows(rf_auc, lr_auc, xgb_auc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model)) +
geom_path(lwd = 1, alpha = 0.8) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option = "plasma", end = .6)
bind_rows(rf_auc, lr_auc, xgb_auc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model)) +
geom_path(lwd = 0.5, alpha = 0.8) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option = "plasma", end = .6)
# the last model
last_mod <- logistic_reg(penalty = lr_best$penalty, mixture = 1) %>%
set_engine("glmnet")  %>%
set_mode("classification")
# the last workflow: based on LR
last_wf <-
lr_workflow %>%
update_model(last_mod)
# the last fit
set.seed(345)
last_fit <-
last_wf %>%
last_fit(data_split)
last_fit
tidy(last_fit)
last_fit %>%
collect_metrics()
last_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 12)
last_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 15)
last_fit %>%
collect_predictions() %>%
roc_curve(stroke, .pred_yes) %>%
autoplot()
# collect sens, spec, j-index at various cut-offs
threshold_data <-
last_fit %>%
collect_predictions() %>%
threshold_perf(stroke, .pred_yes, thresholds = seq(0.0, 1, by = 0.05)) %>%
filter(.metric != "distance") %>%
mutate(group = case_when(
.metric == "sens" | .metric == "spec" ~ "1",
TRUE ~ "2"
))
# find max j-index
max_j_index_threshold <- threshold_data %>%
filter(.metric == "j_index") %>%
filter(.estimate == max(.estimate)) %>%
pull(.threshold)
# plot metrics v cut-offs
ggplot(threshold_data, aes(x = .threshold, y = .estimate, color = .metric, alpha = group)) +
geom_line(size=1) +
#theme_minimal() +
#scale_color_viridis_d(end = 0.9) +
scale_color_brewer(palette = "Set1") +
scale_alpha_manual(values = c(.4, 1), guide = "none") +
geom_vline(xintercept = max_j_index_threshold, alpha = .8, color = "grey30", linetype = "longdash") +
labs(
x = "Probability",
y = "Metric Estimate",
title = "Otimal probability cut-off"
)
# plot metrics v cut-offs
ggplot(threshold_data, aes(x = .threshold, y = .estimate, color = .metric, alpha = group)) +
geom_line(size=1) +
#theme_minimal() +
#scale_color_viridis_d(end = 0.9) +
scale_color_brewer(palette = "Set1") +
scale_alpha_manual(values = c(.4, 1), guide = "none") +
geom_vline(xintercept = max_j_index_threshold, alpha = .8, color = "grey30", linetype = "longdash") +
labs(
x = "Probability",
y = "Metric Estimate",
title = "Optimal probability cut-off"
)
pred_optimized <- last_fit %>%
collect_predictions() %>%
mutate(
.pred = make_two_class_pred(
estimate = .pred_yes,
levels = levels(stroke),
threshold = max_j_index_threshold
)
) %>%
select(stroke, contains(".pred"))
cm_optimized <- pred_optimized %>%
conf_mat(truth = stroke, estimate = .pred)
autoplot(cm_optimized, type = "heatmap")
summary(cm_optimized)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, cache = F)
library(tidymodels)
library(skimr)
library(vip)
library(probably)
library(themis)
library(bestNormalize)
library(embed)
library(ggforce)
# upon quick look at the data set
# if you set smoking_status to factor in col_types, na() won't work
# remove ID, Sex == Other
# output to a factor
df <-
readr::read_csv("data/healthcare-dataset-stroke-data.csv", col_types = "cfdfffffddcf", na = c("Unknown", "N/A")) %>%
mutate(smoking_status = factor(smoking_status),
stroke = factor(ifelse(stroke == 1, "yes", "no"), levels = c("yes", "no"))) %>%
select(-id)
df
df <- df %>% filter(gender != "Other")
skim(df) %>%
yank("numeric")
plot_validation_results <- function(dat, outcome) {
dat %>%
# Create the scatterplot matrix
ggplot(aes(x = .panel_x, y = .panel_y, color = outcome, fill = outcome)) +
geom_point(alpha = 0.4, size = 1) +
geom_autodensity(alpha = .3) +
facet_matrix(vars(-outcome), layer.diag = 2) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
}
pca_rec <- recipe(stroke ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(all_predictors())
pca_prep <- prep(pca_rec)
pca_rec <- recipe(stroke ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_bag(bmi, smoking_status) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(all_predictors())
pca_prep <- prep(pca_rec)
sdev <- pca_prep$steps[[7]]$res$sdev
percent_variation <- sdev^2 / sum(sdev^2)
var_df <- data.frame(PC = paste0("PC", 1:length(sdev)),
var_explained = percent_variation,
stringsAsFactors = FALSE)
sdev <- pca_prep$steps[[8]]$res$sdev
percent_variation <- sdev^2 / sum(sdev^2)
var_df <- data.frame(PC = paste0("PC", 1:length(sdev)),
var_explained = percent_variation,
stringsAsFactors = FALSE)
var_df <- var_df %>%
mutate(var_cum_sum = cumsum(var_explained))
var_df %>%
mutate(PC = forcats::fct_inorder(PC)) %>%
ggplot(aes(x = PC, y = var_explained)) +
geom_col(aes(fill = var_cum_sum)) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) +
scale_fill_continuous(type = "viridis")
tidied_pca <- tidy(pca_prep, 8)
tidied_pca %>%
filter(component %in% paste0("PC", 1:6)) %>%
mutate(component = forcats::fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
pca_df <- juice(pca_prep)
pca_df %>%
plot_validation_results("stroke") +
ggtitle("PCA")
plot_validation_results <- function(dat, outcome) {
dat %>%
# Create the scatterplot matrix
ggplot(aes(x = .panel_x, y = .panel_y, color = {{outcome}}, fill = {{outcome}})) +
geom_point(alpha = 0.4, size = 1) +
geom_autodensity(alpha = .3) +
facet_matrix(vars(-{{outcome}}), layer.diag = 2) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
}
pca_df <- juice(pca_prep)
pca_df %>%
plot_validation_results(stroke) +
ggtitle("PCA")
pca_df %>%
plot_validation_results(stroke) +
ggtitle("PCA")
umap_rec <- recipe(stroke ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_bag(bmi, smoking_status) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_umap(all_predictors(),
neighbors = 15,
min_dist = 0.01,
num_comp = 8,
outcome = "stroke")
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
plot_validation_results(outcome = stroke) +
ggtitle("Supervised UMAP")
umap_rec <- recipe(stroke ~., data = df) %>%
step_nzv(all_predictors()) %>%
step_impute_bag(bmi, smoking_status) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_umap(all_predictors(),
neighbors = 15,
min_dist = 0.6,
num_comp = 8,
outcome = "stroke")
umap_prep <- prep(umap_rec)
juice(umap_prep) %>%
plot_validation_results(outcome = stroke) +
ggtitle("Supervised UMAP")
plot_validation_results <- function(dat, outcome) {
dat %>%
# Create the scatterplot matrix
ggplot(aes(x = .panel_x, y = .panel_y, color = {{outcome}}, fill = {{outcome}})) +
geom_point(alpha = 0.4, size = 0.1) +
geom_autodensity(alpha = .3) +
facet_matrix(vars(-{{outcome}}), layer.diag = 2) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
}
juice(umap_prep) %>%
plot_validation_results(outcome = stroke) +
ggtitle("Supervised UMAP")
