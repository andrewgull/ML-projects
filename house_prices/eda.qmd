---
title: "House Prices"
author: "AG"
format: html
---

# Libraries

```{r}
library(themis)
library(probably)
library(vip)
library(skimr)
library(bestNormalize) # for ord QQ norm
library(embed) # for UMAP
library(tidyverse)
library(GGally)
```

# First look at the data 

```{r}
data_train <- read_csv("data/train.csv") 

data_test <- read_csv("data/test.csv") %>% 
  mutate(across(is_character, ~ as_factor(.x)))

dim(data_train)
```

I should submit price predictions for the test data set

## Factors

Here I will look at character columns and convert them into factors after NA replacement

```{r}
data_train %>% 
  skim() %>% 
  yank("character")
```

Notes on NAs:

- According to `data_description.txt`, NA in `Alley` means "no alley access" - should be replaced by "no access"

- NA in `MasVnrType` means "no data"

- NA in `BsmtQual`means "no basement" - should be replaced

- NA in `BsmtCond` means "no basement" - should be replaced

- NA in `BsmtExposure` means "no basement" - should be replaced

- NA in `BsmtFinType1` means "no basement" - should be replaced

- NA in `BsmtFinType2`means "no basement" - should be replaced

- NA in `Electrical` means "no data"

- NA in `FireplaceQu` means "no fireplace", should be replaced

- NA in `Garage*` means "no garage" -  should be replaced

- NA in `PoolQC` means "no pool" - should be replaced

- NA in `Fence` means "no fence" - should be replaced

- NA in `MiscFeature` means "no data"


### Replacing some NAs and converting to factors

```{r}
data_train <- data_train %>%
  mutate_at(
    vars(
      BsmtQual,
      BsmtCond,
      BsmtExposure,
      BsmtFinType1,
      BsmtFinType2,
      FireplaceQu,
      GarageType,
      GarageCond,
      GarageFinish,
      GarageCars,
      GarageQual,
      PoolQC,
      Fence
    ),
    ~ replace_na(., "No")
  ) %>%
  mutate(across(is_character, ~ as_factor(.x)))

data_train %>% 
  skim() %>% 
  yank("factor")
```


## Numerics

```{r}
data_train %>% 
  skim() %>% 
  yank("numeric")
```

For NA imputation I will use some kind of algorithm

# Corr. matrix

```{r, fig.width=10, fig.height=10}
cor_matrix <- data_train %>% 
  select(where(is.numeric)) %>%
  cor(use = "pairwise.complete.obs", method = "spearman")

corrplot::corrplot(cor_matrix, type = "upper", tl.col = "black", tl.cex = 0.6)
```

```{r, message=FALSE, warning=FALSE, fig.width=10, fig.height=10}
num_cols <- data_train %>%
  select(where(is.numeric)) %>% 
  colnames()

data_train %>% 
  select(where(is.numeric), -Id) %>% 
  ggpairs(columns = num_cols[2:5])
```

